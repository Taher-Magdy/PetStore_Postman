{
	"info": {
		"_postman_id": "a12c8c2b-efce-4dce-a116-81a61e081e7f",
		"name": "PetStore_collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28312519"
	},
	"item": [
		{
			"name": "UsersFolder",
			"item": [
				{
					"name": "CreateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the response schema contains the properties \"code\" , \"type\" , \"message\" \r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"code\");\r",
									"});\r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"message\");\r",
									"});\r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"type\");\r",
									"});\r",
									"\r",
									"\r",
									"// Check the data type of code, type, and message\r",
									"pm.test(\"Check data type of code\", function () {\r",
									"    pm.expect(responseBody.code).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of type\", function () {\r",
									"    pm.expect(responseBody.type).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of message\", function () {\r",
									"    pm.expect(responseBody.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check if the values of code, type, and message are not null\r",
									"pm.test(\"Check code value is not null\", function () {\r",
									"    pm.expect(responseBody.code).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Check type value is not null\", function () {\r",
									"    pm.expect(responseBody.type).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Check message value is not null\", function () {\r",
									"    pm.expect(responseBody.message).to.not.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"// check the range of response values\r",
									"pm.test(\"Code is a non-negative integer\", function () {  \r",
									"  pm.expect(responseBody.code).to.be.a('number');\r",
									"  pm.expect(responseBody.code).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Type is a non-empty string\", function () {\r",
									"    pm.expect(responseBody.type).to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"    pm.expect(responseBody.message).to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"Taher\",\r\n  \"firstName\": \"string\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/user",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateListOfUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the response schema contains the properties \"code\" , \"type\" , \"message\" \r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"code\");\r",
									"});\r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"message\");\r",
									"});\r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"type\");\r",
									"});\r",
									"\r",
									"\r",
									"// Check the data type of code, type, and message\r",
									"pm.test(\"Check data type of code\", function () {\r",
									"    pm.expect(responseBody.code).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of type\", function () {\r",
									"    pm.expect(responseBody.type).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of message\", function () {\r",
									"    pm.expect(responseBody.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check if the values of code, type, and message are not null\r",
									"pm.test(\"Check code value is not null\", function () {\r",
									"    pm.expect(responseBody.code).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Check type value is not null\", function () {\r",
									"    pm.expect(responseBody.type).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Check message value is not null\", function () {\r",
									"    pm.expect(responseBody.message).to.not.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"// check the range of response values\r",
									"pm.test(\"Code is a non-negative integer\", function () {  \r",
									"  pm.expect(responseBody.code).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Type is a non-empty string\", function () {\r",
									"    pm.expect(responseBody.type).to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"    pm.expect(responseBody.message).to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": 0,\r\n    \"username\": \"string\",\r\n    \"firstName\": \"string\",\r\n    \"lastName\": \"string\",\r\n    \"email\": \"string\",\r\n    \"password\": \"string\",\r\n    \"phone\": \"string\",\r\n    \"userStatus\": 0\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/user/createWithList",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"user",
								"createWithList"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateArrayOfUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the response schema contains the properties \"code\" , \"type\" , \"message\" \r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"code\");\r",
									"});\r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"message\");\r",
									"});\r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"type\");\r",
									"});\r",
									"\r",
									"\r",
									"// Check the data type of code, type, and message\r",
									"pm.test(\"Check data type of code\", function () {\r",
									"    pm.expect(responseBody.code).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of type\", function () {\r",
									"    pm.expect(responseBody.type).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of message\", function () {\r",
									"    pm.expect(responseBody.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check if the values of code, type, and message are not null\r",
									"pm.test(\"Check code value is not null\", function () {\r",
									"    pm.expect(responseBody.code).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Check type value is not null\", function () {\r",
									"    pm.expect(responseBody.type).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Check message value is not null\", function () {\r",
									"    pm.expect(responseBody.message).to.not.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"// check the range of response values\r",
									"pm.test(\"Code is a non-negative integer\", function () {  \r",
									"  pm.expect(responseBody.code).to.be.a('number');\r",
									"  pm.expect(responseBody.code).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Type is a non-empty string\", function () {\r",
									"    pm.expect(responseBody.type).to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"    pm.expect(responseBody.message).to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": 0,\r\n    \"username\": \"string\",\r\n    \"firstName\": \"string\",\r\n    \"lastName\": \"string\",\r\n    \"email\": \"string\",\r\n    \"password\": \"string\",\r\n    \"phone\": \"string\",\r\n    \"userStatus\": 0\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/user/createWithArray",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"user",
								"createWithArray"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the response schema contains the properties \"code\" , \"type\" , \"message\" \r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"code\");\r",
									"});\r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"message\");\r",
									"});\r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"type\");\r",
									"});\r",
									"\r",
									"\r",
									"// Check the data type of code, type, and message\r",
									"pm.test(\"Check data type of code\", function () {\r",
									"    pm.expect(responseBody.code).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of type\", function () {\r",
									"    pm.expect(responseBody.type).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of message\", function () {\r",
									"    pm.expect(responseBody.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check if the values of code, type, and message are not null\r",
									"pm.test(\"Check code value is not null\", function () {\r",
									"    pm.expect(responseBody.code).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Check type value is not null\", function () {\r",
									"    pm.expect(responseBody.type).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Check message value is not null\", function () {\r",
									"    pm.expect(responseBody.message).to.not.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"// check the range of response values\r",
									"pm.test(\"Code is a non-negative integer\", function () {  \r",
									"  pm.expect(responseBody.code).to.be.a('number');\r",
									"  pm.expect(responseBody.code).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Type is a non-empty string\", function () {\r",
									"    pm.expect(responseBody.type).to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"    pm.expect(responseBody.message).to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "username",
								"value": "Taher",
								"type": "text"
							},
							{
								"key": "password",
								"value": "t@her",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}/user/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the response schema contains the properties \"code\" , \"type\" , \"message\" \r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"code\");\r",
									"});\r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"message\");\r",
									"});\r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"type\");\r",
									"});\r",
									"\r",
									"\r",
									"// Check the data type of code, type, and message\r",
									"pm.test(\"Check data type of code\", function () {\r",
									"    pm.expect(responseBody.code).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of type\", function () {\r",
									"    pm.expect(responseBody.type).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of message\", function () {\r",
									"    pm.expect(responseBody.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check if the values of code, type, and message are not null\r",
									"pm.test(\"Check code value is not null\", function () {\r",
									"    pm.expect(responseBody.code).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Check type value is not null\", function () {\r",
									"    pm.expect(responseBody.type).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Check message value is not null\", function () {\r",
									"    pm.expect(responseBody.message).to.not.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"// check the range of response values\r",
									"pm.test(\"Code is a non-negative integer\", function () {  \r",
									"  pm.expect(responseBody.code).to.be.a('number');\r",
									"  pm.expect(responseBody.code).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Type is a non-empty string\", function () {\r",
									"    pm.expect(responseBody.type).to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"    pm.expect(responseBody.message).to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"username\": \"Taher\",\r\n  \"firstName\": \"Taher\",\r\n  \"lastName\": \"string\",\r\n  \"email\": \"string\",\r\n  \"password\": \"string\",\r\n  \"phone\": \"string\",\r\n  \"userStatus\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/user/Taher",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"user",
								"Taher"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserByUsrname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is a valid JSON object\", function () {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Response object has id\", function () {\r",
									"    pm.expect(responseBody).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Response object has username property\", function () {\r",
									"    pm.expect(responseBody).to.have.property('username');\r",
									"});\r",
									"pm.test(\"Response object has  email property\", function () {\r",
									"    pm.expect(responseBody).to.have.property('email');\r",
									"});\r",
									"pm.test(\"Response object has userStatus property\", function () {\r",
									"    pm.expect(responseBody).to.have.property('userStatus');\r",
									"});\r",
									"\r",
									"// Check data type of id (should be a number)\r",
									"pm.test(\"Check data type of id\", function () {\r",
									"    pm.expect(responseBody.id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// Check data type of username (should be a string)\r",
									"pm.test(\"Check data type of username\", function () {\r",
									"    pm.expect(responseBody.username).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check data type of firstName (should be a string)\r",
									"pm.test(\"Check data type of firstName\", function () {\r",
									"    pm.expect(responseBody.firstName).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check data type of lastName (should be a string)\r",
									"pm.test(\"Check data type of lastName\", function () {\r",
									"    pm.expect(responseBody.lastName).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check data type of email (should be a string)\r",
									"pm.test(\"Check data type of email\", function () {\r",
									"    pm.expect(responseBody.email).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check data type of password (should be a string)\r",
									"pm.test(\"Check data type of password\", function () {\r",
									"    pm.expect(responseBody.password).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check data type of phone (should be a string)\r",
									"pm.test(\"Check data type of phone\", function () {\r",
									"    pm.expect(responseBody.phone).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check data type of userStatus (should be a number)\r",
									"pm.test(\"Check data type of userStatus\", function () {\r",
									"    pm.expect(responseBody.userStatus).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// Check that username is updated\r",
									"pm.test(\"Check value of firstName\", function () {\r",
									"    pm.expect(responseBody.firstName).to.equal(\"Taher\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}/user/Taher",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"user",
								"Taher"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserLogout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the response schema contains the properties \"code\" , \"type\" , \"message\" \r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"code\");\r",
									"});\r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"message\");\r",
									"});\r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"type\");\r",
									"});\r",
									"\r",
									"\r",
									"// Check the data type of code, type, and message\r",
									"pm.test(\"Check data type of code\", function () {\r",
									"    pm.expect(responseBody.code).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of type\", function () {\r",
									"    pm.expect(responseBody.type).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of message\", function () {\r",
									"    pm.expect(responseBody.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check if the values of code, type, and message are not null\r",
									"pm.test(\"Check code value is not null\", function () {\r",
									"    pm.expect(responseBody.code).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Check type value is not null\", function () {\r",
									"    pm.expect(responseBody.type).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Check message value is not null\", function () {\r",
									"    pm.expect(responseBody.message).to.not.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"// check the range of response values\r",
									"pm.test(\"Code is a non-negative integer\", function () {  \r",
									"  pm.expect(responseBody.code).to.be.a('number');\r",
									"  pm.expect(responseBody.code).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Type is a non-empty string\", function () {\r",
									"    pm.expect(responseBody.type).to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"    pm.expect(responseBody.message).to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/user/logout",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the response schema contains the properties \"code\" , \"type\" , \"message\" \r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"code\");\r",
									"});\r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"message\");\r",
									"});\r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"type\");\r",
									"});\r",
									"\r",
									"\r",
									"// Check the data type of code, type, and message\r",
									"pm.test(\"Check data type of code\", function () {\r",
									"    pm.expect(responseBody.code).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of type\", function () {\r",
									"    pm.expect(responseBody.type).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of message\", function () {\r",
									"    pm.expect(responseBody.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check if the values of code, type, and message are not null\r",
									"pm.test(\"Check code value is not null\", function () {\r",
									"    pm.expect(responseBody.code).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Check type value is not null\", function () {\r",
									"    pm.expect(responseBody.type).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Check message value is not null\", function () {\r",
									"    pm.expect(responseBody.message).to.not.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"// check the range of response values\r",
									"pm.test(\"Code is a non-negative integer\", function () {  \r",
									"  pm.expect(responseBody.code).to.be.a('number');\r",
									"  pm.expect(responseBody.code).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Type is a non-empty string\", function () {\r",
									"    pm.expect(responseBody.type).to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"    pm.expect(responseBody.message).to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/user/Taher",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"user",
								"Taher"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PetFolder",
			"item": [
				{
					"name": "AddNewPet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the value of the first ID\r",
									"var Petid = responseBody.id;\r",
									"\r",
									"// Store the value in an environment variable\r",
									"pm.environment.set(\"Petid\", Petid);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//////////\r",
									"// test schema validation \r",
									"pm.test(\"Check Response Schema include id \",function(){\r",
									"    pm.expect(responseBody).to.have.property('id');\r",
									"})\r",
									"pm.test(\"Check Response Schema includes category\"),function(){\r",
									" pm.expect(responseBody).to.have.property('category');\r",
									"}\r",
									"   \r",
									"   pm.test(\"Check Response Schema includes name\"),function(){\r",
									"    pm.expect(responseBody).to.have.property('name');\r",
									"   }\r",
									"   \r",
									"   pm.test(\"Check response schema includes photoUrl\"),function(){\r",
									"    pm.expect(responseBody).to.have.property('photoUrls');\r",
									"   }\r",
									"   \r",
									"   pm.test(\"Check Response Schema includes tags\"),function(){\r",
									"    pm.expect(responseBody).to.have.property('tags');\r",
									"   }\r",
									"   \r",
									"   pm.test(\"Check response schema includes status\"),function(){\r",
									"    pm.expect(responseBody).to.have.property('status');\r",
									"   }\r",
									"\r",
									"   // Check category schema\r",
									"    \r",
									"pm.test(\"check category in response schema includes id\"),function(){\r",
									"    pm.expect(responseBody.category).to.have.property(\"id\")\r",
									"    }\r",
									"pm.test(\"check category  response schema includes name\"),function(){\r",
									"    pm.expect(responseBody.category).to.have.property(\"name\")\r",
									"   }\r",
									"\r",
									"// Loop to Check properties in tags array\r",
									" for (var i = 0; i < responseBody.tags.length; i++) {\r",
									"        var tag = responseBody.tags[i];\r",
									"        pm.test(\"Check data type of tags[\" + i + \"].id\", function () {\r",
									"            pm.expect(tag).to.have.property('id');\r",
									"        });\r",
									"\r",
									"        // Check data type of name\r",
									"        pm.test(\"Check data type of tags[\" + i + \"].name\", function () {\r",
									"            pm.expect(tag).to.have.property('name');\r",
									"        });\r",
									"    }\r",
									"\r",
									"// Loop through each object in the tags array\r",
									"for (var i = 0; i < responseBody.tags.length; i++) {\r",
									"    var tag = responseBody.tags[i];\r",
									"\r",
									"    // Check data type of id\r",
									"    pm.test(\"Check data type of tags[\" + i + \"].id\", function () {\r",
									"        pm.expect(tag.id).to.be.a(\"number\");\r",
									"    });\r",
									"\r",
									"    // Check if name is equal to \"string\"\r",
									"    pm.test(\"Check value of tags[\" + i + \"].name\", function () {\r",
									"        pm.expect(tag.name).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{$randomInt}},\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/pet",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "UploadImage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Check if the response schema contains the properties \"code\" , \"type\" , \"message\" \r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"code\");\r",
									"});\r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"message\");\r",
									"});\r",
									"pm.test(\"Check response schema\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"type\");\r",
									"});\r",
									"\r",
									"\r",
									"// Check the data type of code, type, and message\r",
									"pm.test(\"Check data type of code\", function () {\r",
									"    pm.expect(responseBody.code).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of type\", function () {\r",
									"    pm.expect(responseBody.type).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of message\", function () {\r",
									"    pm.expect(responseBody.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Check if the values of code, type, and message are not null\r",
									"pm.test(\"Check code value is not null\", function () {\r",
									"    pm.expect(responseBody.code).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Check type value is not null\", function () {\r",
									"    pm.expect(responseBody.type).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Check message value is not null\", function () {\r",
									"    pm.expect(responseBody.message).to.not.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"// check the range of response values\r",
									"pm.test(\"Code is a non-negative integer\", function () {  \r",
									"  pm.expect(responseBody.code).to.be.a('number');\r",
									"  pm.expect(responseBody.code).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Type is a non-empty string\", function () {\r",
									"    pm.expect(responseBody.type).to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"    pm.expect(responseBody.message).to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/C:/Users/Taher Magdy/Desktop/2.jpg"
							}
						},
						"url": {
							"raw": "{{baseurl}}/pet/{{Petid}}/uploadImage",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"pet",
								"{{Petid}}",
								"uploadImage"
							]
						}
					},
					"response": []
				},
				{
					"name": "FindPetById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}/pet/{{Petid}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"pet",
								"{{Petid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FindByStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/pet/findByStatus?status=available",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "available"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateWithFormData(Text))",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a code property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('code');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a type property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('type');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a message property\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.code).to.be.a('number');\r",
									"    pm.expect(responseData.code).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Type is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"No unexpected properties in the response body\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(Object.keys(responseData)).to.have.lengthOf(3, \"Response should contain only expected properties\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "name=cat&status=availabe",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/pet/{{Petid}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"pet",
								"{{Petid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateData",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Extract the value of the first ID\r",
									"var Petid = responseBody.id;\r",
									"\r",
									"// Store the value in an environment variable\r",
									"pm.environment.set(\"Petid\", Petid);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//////////\r",
									"// test schema validation \r",
									"pm.test(\"Check Response Schema include id \",function(){\r",
									"    pm.expect(responseBody).to.have.property('id');\r",
									"})\r",
									"pm.test(\"Check Response Schema includes category\"),function(){\r",
									" pm.expect(responseBody).to.have.property('category');\r",
									"}\r",
									"   \r",
									"   pm.test(\"Check Response Schema includes name\"),function(){\r",
									"    pm.expect(responseBody).to.have.property('name');\r",
									"   }\r",
									"   \r",
									"   pm.test(\"Check response schema includes photoUrl\"),function(){\r",
									"    pm.expect(responseBody).to.have.property('photoUrls');\r",
									"   }\r",
									"   \r",
									"   pm.test(\"Check Response Schema includes tags\"),function(){\r",
									"    pm.expect(responseBody).to.have.property('tags');\r",
									"   }\r",
									"   \r",
									"   pm.test(\"Check response schema includes status\"),function(){\r",
									"    pm.expect(responseBody).to.have.property('status');\r",
									"   }\r",
									"\r",
									"   // Check category schema\r",
									"    \r",
									"pm.test(\"check category in response schema includes id\"),function(){\r",
									"    pm.expect(responseBody.category).to.have.property(\"id\")\r",
									"    }\r",
									"pm.test(\"check category  response schema includes name\"),function(){\r",
									"    pm.expect(responseBody.category).to.have.property(\"name\")\r",
									"   }\r",
									"\r",
									"// Loop to Check properties in tags array\r",
									" for (var i = 0; i < responseBody.tags.length; i++) {\r",
									"        var tag = responseBody.tags[i];\r",
									"        pm.test(\"Check data type of tags[\" + i + \"].id\", function () {\r",
									"            pm.expect(tag).to.have.property('id');\r",
									"        });\r",
									"\r",
									"        // Check data type of name\r",
									"        pm.test(\"Check data type of tags[\" + i + \"].name\", function () {\r",
									"            pm.expect(tag).to.have.property('name');\r",
									"        });\r",
									"    }\r",
									"\r",
									"// Loop through each object in the tags array\r",
									"for (var i = 0; i < responseBody.tags.length; i++) {\r",
									"    var tag = responseBody.tags[i];\r",
									"\r",
									"    // Check data type of id\r",
									"    pm.test(\"Check data type of tags[\" + i + \"].id\", function () {\r",
									"        pm.expect(tag.id).to.be.a(\"number\");\r",
									"    });\r",
									"\r",
									"    // Check if name is equal to \"string\"\r",
									"    pm.test(\"Check value of tags[\" + i + \"].name\", function () {\r",
									"        pm.expect(tag.name).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{Petid}},\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/pet",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "api_key",
								"value": "Taher",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}/pet/{{Petid}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"pet",
								"{{Petid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "StoreFolder",
			"item": [
				{
					"name": "PlaceAnOrder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"try {\r",
									"    // Get the status code from the response\r",
									"    var statusCode = pm.response.code;\r",
									"\r",
									"    // Check if the status code is 200\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(statusCode).to.equal(200);\r",
									"    });\r",
									"} catch (error) {\r",
									"    // Handle any errors that occur during the test\r",
									"    console.error(\"An error occurred during status code test:\", error);\r",
									"}\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"var id = responseBody.id;\r",
									"pm.environment.set(\"orderId\", id);\r",
									"\r",
									"\r",
									"// Test cases to check that each property value is not null\r",
									"pm.test(\"Check id is not null\", function () {\r",
									"    pm.expect(responseBody.id).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check petId is not null\", function () {\r",
									"    pm.expect(responseBody.petId).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check quantity is not null\", function () {\r",
									"    pm.expect(responseBody.quantity).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check shipDate is not null\", function () {\r",
									"    pm.expect(responseBody.shipDate).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check status is not null\", function () {\r",
									"    pm.expect(responseBody.status).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check complete is not null\", function () {\r",
									"    pm.expect(responseBody.complete).to.not.equal(null);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has 'id' property\", function () {\r",
									"    pm.expect(responseBody).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has 'petId' property\", function () {\r",
									"    pm.expect(responseBody).to.have.property('petId');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has 'quantity' property\", function () {\r",
									"    pm.expect(responseBody).to.have.property('quantity');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has 'shipDate' property\", function () {\r",
									"    pm.expect(responseBody).to.have.property('shipDate');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has 'status' property\", function () {\r",
									"    pm.expect(responseBody).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test(\"Response has 'complete' property\", function () {\r",
									"    pm.expect(responseBody).to.have.property('complete');\r",
									"});\r",
									"\r",
									"\r",
									"// Test cases to check the data types of properties in the response\r",
									"\r",
									"    // Check data type of id (should be a number)\r",
									"pm.test(\"Check data type of id\", function () {\r",
									"    pm.expect(responseBody.id).to.be.a('number');})\r",
									"\r",
									"    // Check data type of petId (should be a number)\r",
									"pm.test(\"Check data type of petId\", function () {\r",
									"    pm.expect(responseBody.petId).to.be.a('number');\r",
									"})\r",
									"    // Check data type of quantity (should be a number)\r",
									"pm.test(\"Check data type of quantity\", function () {\r",
									"    pm.expect(responseBody.quantity).to.be.a('number');})\r",
									"\r",
									"    // Check data type of shipDate (should be a string)\r",
									"pm.test(\"Check data type of shipDate\", function () {\r",
									"    pm.expect(responseBody.shipDate).to.be.a('string');})\r",
									"\r",
									"        // Check data type of status (should be a string)\r",
									"pm.test(\"Check data type of status\", function () {\r",
									"    pm.expect(responseBody.status).to.be.a('string');\r",
									"})\r",
									"    // Check data type of complete (should be a boolean)\r",
									"pm.test(\"Check data type of complete\", function () {\r",
									"    pm.expect(responseBody.complete).to.be.a('boolean');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check format of shipDate\", function () {\r",
									"        var shipDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}\\+\\d{4}$/;\r",
									"        pm.expect(responseBody.shipDate).to.match(shipDateRegex);\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    pm.expect(responseBody.id).to.be.at.least(0, \"Id should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status should be one of the expected values\", function () {    \r",
									"    pm.expect(responseBody.status).to.exist.and.to.be.oneOf([\"placed\", \"approved\", \"delivered\", \"shipped\"]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Quantity is a non-negative integer\", function () {\r",
									"    pm.expect(responseBody.quantity).to.be.at.least(0, \"Quantity should be a non-negative integer\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{$randomInt}},\r\n  \"petId\": 0,\r\n  \"quantity\": 0,\r\n  \"shipDate\": \"2024-02-18T09:10:08.236Z\",\r\n  \"status\": \"placed\",\r\n  \"complete\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/store/order",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "FindOrderById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"\r",
									"// Test cases to check the data types of properties in the response\r",
									"\r",
									"    // Check data type of id (should be a number)\r",
									"pm.test(\"Check data type of id\", function () {\r",
									"    pm.expect(responseBody.id).to.be.a('number');})\r",
									"\r",
									"    // Check data type of petId (should be a number)\r",
									"pm.test(\"Check data type of petId\", function () {\r",
									"    pm.expect(responseBody.petId).to.be.a('number');\r",
									"})\r",
									"    // Check data type of quantity (should be a number)\r",
									"pm.test(\"Check data type of quantity\", function () {\r",
									"    pm.expect(responseBody.quantity).to.be.a('number');})\r",
									"\r",
									"    // Check data type of shipDate (should be a string)\r",
									"pm.test(\"Check data type of shipDate\", function () {\r",
									"    pm.expect(responseBody.shipDate).to.be.a('string');})\r",
									"\r",
									"        // Check data type of status (should be a string)\r",
									"pm.test(\"Check data type of status\", function () {\r",
									"    pm.expect(responseBody.status).to.be.a('string');\r",
									"})\r",
									"    // Check data type of complete (should be a boolean)\r",
									"pm.test(\"Check data type of complete\", function () {\r",
									"    pm.expect(responseBody.complete).to.be.a('boolean');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}/store/order/{{orderId}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"store",
								"order",
								"{{orderId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "StoreInventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Test case to check if the response body is an object\r",
									"pm.test(\"Check if response body is an object\", function () {\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"});\r",
									"\r",
									"\r",
									"// Test cases to check the existence of each property\r",
									"pm.test(\"Check 'sold' property exists\", function () {\r",
									"    pm.expect(responseBody).to.have.property('sold');\r",
									"});\r",
									"\r",
									"pm.test(\"Check 'string' property exists\", function () {\r",
									"    pm.expect(responseBody).to.have.property('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check 'pending' property exists\", function () {\r",
									"    pm.expect(responseBody).to.have.property('pending');\r",
									"});\r",
									"\r",
									"pm.test(\"Check 'available' property exists\", function () {\r",
									"    pm.expect(responseBody).to.have.property('available');\r",
									"});\r",
									"////////////////////////////////////////////////\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Test cases to check that each property value is not null\r",
									"pm.test(\"Check 'sold' value is not null\", function () {\r",
									"    pm.expect(responseBody.sold).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check 'string' value is not null\", function () {\r",
									"    pm.expect(responseBody.string).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check 'pending' value is not null\", function () {\r",
									"    pm.expect(responseBody.pending).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check 'available' value is not null\", function () {\r",
									"    pm.expect(responseBody.available).to.not.equal(null);\r",
									"});\r",
									"////////////////////////////////////////////////////\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Test cases to check the data types of each property\r",
									"pm.test(\"Check data type of 'sold'\", function () {\r",
									"    pm.expect(responseBody.sold).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of 'string'\", function () {\r",
									"    pm.expect(responseBody.string).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of 'pending'\", function () {\r",
									"    pm.expect(responseBody.pending).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of 'available'\", function () {\r",
									"    pm.expect(responseBody.available).to.be.a('number');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/store/inventory",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"store",
								"inventory"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteOrder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Test cases to check the existence of each property\r",
									"pm.test(\"Check if 'code' property exists\", function () {\r",
									"    pm.expect(responseBody).to.have.property('code');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'type' property exists\", function () {\r",
									"    pm.expect(responseBody).to.have.property('type');\r",
									"});\r",
									"\r",
									"pm.test(\"Check if 'message' property exists\", function () {\r",
									"    pm.expect(responseBody).to.have.property('message');\r",
									"});\r",
									"\r",
									"// Test cases to check that each property value is not null\r",
									"pm.test(\"Check 'code' value is not null\", function () {\r",
									"    pm.expect(responseBody.code).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check 'type' value is not null\", function () {\r",
									"    pm.expect(responseBody.type).to.not.equal(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check 'message' value is not null\", function () {\r",
									"    pm.expect(responseBody.message).to.not.equal(null);\r",
									"});\r",
									"\r",
									"// Test cases to check the data types of each property\r",
									"pm.test(\"Check data type of 'code'\", function () {\r",
									"    pm.expect(responseBody.code).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of 'type'\", function () {\r",
									"    pm.expect(responseBody.type).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Check data type of 'message'\", function () {\r",
									"    pm.expect(responseBody.message).to.be.a('string');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/store/order/{{orderId}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"store",
								"order",
								"{{orderId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}